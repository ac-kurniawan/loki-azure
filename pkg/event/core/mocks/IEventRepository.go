// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	core_event "github.com/ac-kurniawan/loki-azure/pkg/event/core"
	mock "github.com/stretchr/testify/mock"
)

// IEventRepository is an autogenerated mock type for the IEventRepository type
type IEventRepository struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: data
func (_m *IEventRepository) CreateBook(data core_event.Book) (*core_event.Book, error) {
	ret := _m.Called(data)

	var r0 *core_event.Book
	if rf, ok := ret.Get(0).(func(core_event.Book) *core_event.Book); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_event.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(core_event.Book) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEvent provides a mock function with given fields: data
func (_m *IEventRepository) CreateEvent(data core_event.Event) (*core_event.Event, error) {
	ret := _m.Called(data)

	var r0 *core_event.Event
	if rf, ok := ret.Get(0).(func(core_event.Event) *core_event.Event); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_event.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(core_event.Event) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSchedule provides a mock function with given fields: data
func (_m *IEventRepository) CreateSchedule(data core_event.Schedule) (*core_event.Schedule, error) {
	ret := _m.Called(data)

	var r0 *core_event.Schedule
	if rf, ok := ret.Get(0).(func(core_event.Schedule) *core_event.Schedule); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_event.Schedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(core_event.Schedule) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookById provides a mock function with given fields: orderId
func (_m *IEventRepository) GetBookById(orderId string) (*core_event.Book, error) {
	ret := _m.Called(orderId)

	var r0 *core_event.Book
	if rf, ok := ret.Get(0).(func(string) *core_event.Book); ok {
		r0 = rf(orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_event.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventById provides a mock function with given fields: eventId
func (_m *IEventRepository) GetEventById(eventId string) (*core_event.Event, error) {
	ret := _m.Called(eventId)

	var r0 *core_event.Event
	if rf, ok := ret.Get(0).(func(string) *core_event.Event); ok {
		r0 = rf(eventId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_event.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(eventId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScheduleById provides a mock function with given fields: scheduleId
func (_m *IEventRepository) GetScheduleById(scheduleId string) (*core_event.Schedule, error) {
	ret := _m.Called(scheduleId)

	var r0 *core_event.Schedule
	if rf, ok := ret.Get(0).(func(string) *core_event.Schedule); ok {
		r0 = rf(scheduleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_event.Schedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(scheduleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchedulesByEventId provides a mock function with given fields: eventId
func (_m *IEventRepository) GetSchedulesByEventId(eventId string) ([]core_event.Schedule, error) {
	ret := _m.Called(eventId)

	var r0 []core_event.Schedule
	if rf, ok := ret.Get(0).(func(string) []core_event.Schedule); ok {
		r0 = rf(eventId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core_event.Schedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(eventId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: data
func (_m *IEventRepository) UpdateEvent(data core_event.Event) (*core_event.Event, error) {
	ret := _m.Called(data)

	var r0 *core_event.Event
	if rf, ok := ret.Get(0).(func(core_event.Event) *core_event.Event); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_event.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(core_event.Event) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSchedule provides a mock function with given fields: data
func (_m *IEventRepository) UpdateSchedule(data core_event.Schedule) (*core_event.Schedule, error) {
	ret := _m.Called(data)

	var r0 *core_event.Schedule
	if rf, ok := ret.Get(0).(func(core_event.Schedule) *core_event.Schedule); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_event.Schedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(core_event.Schedule) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
